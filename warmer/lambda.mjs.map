{
  "version": 3,
  "sources": ["../../src/api/warmer/lambda.ts"],
  "sourcesContent": ["import { LambdaClient, InvokeCommand } from \"@aws-sdk/client-lambda\";\nimport { TextDecoder } from \"util\";\n\nconst lambdaClient = new LambdaClient({});\nconst textDecoder = new TextDecoder();\n\n/**\n * Invokes a batch of lambdas concurrently and returns the unique instance IDs found.\n */\nasync function invokeBatch(\n  lambdaName: string,\n  count: number,\n): Promise<Set<string>> {\n  if (count <= 0) {\n    return new Set();\n  }\n\n  console.log(`Firing a batch of ${count} concurrent invocations...`);\n\n  const invocationPromises = Array.from({ length: count }, () => {\n    const command = new InvokeCommand({\n      FunctionName: lambdaName,\n      Payload: JSON.stringify({ action: \"warmer\" }),\n    });\n    return lambdaClient.send(command);\n  });\n\n  const results = await Promise.allSettled(invocationPromises);\n  const foundInstanceIds = new Set<string>();\n\n  results.forEach((result) => {\n    if (result.status === \"fulfilled\" && result.value.Payload) {\n      try {\n        const payloadString = textDecoder.decode(result.value.Payload);\n        const body = JSON.parse(payloadString);\n        if (body.instanceId) {\n          foundInstanceIds.add(body.instanceId);\n        }\n      } catch (e) {\n        console.error(\"Error parsing payload from target function:\", e);\n      }\n    } else if (result.status === \"rejected\") {\n      console.error(\"Invocation failed:\", result.reason.message);\n    }\n  });\n\n  return foundInstanceIds;\n}\n\nexport const handler = async (event: {}) => {\n  const { lambdaName, numInstancesStr, maxWavesStr } = {\n    lambdaName: process.env.LAMBDA_NAME,\n    numInstancesStr: process.env.NUM_INSTANCES,\n    maxWavesStr: process.env.MAX_WAVES,\n  };\n\n  if (!lambdaName || !numInstancesStr) {\n    throw new Error(\"Env vars 'LAMBDA_NAME' and 'NUM_INSTANCES' are required.\");\n  }\n\n  const numInstances = parseInt(numInstancesStr, 10);\n  // Default to 5 waves if MAX_WAVES is not set\n  const maxWaves = parseInt(maxWavesStr || \"5\", 10);\n\n  let totalInvocations = 0;\n  let wavesCompleted = 0;\n  const uniqueInstanceIds = new Set<string>();\n\n  for (let i = 1; i <= maxWaves; i++) {\n    wavesCompleted = i;\n\n    // Calculate how many more instances are needed\n    const neededCount = numInstances - uniqueInstanceIds.size;\n    if (neededCount <= 0) {\n      console.log(\"Target met. No more waves needed.\");\n      break;\n    }\n\n    console.log(`--- Wave ${i} of ${maxWaves} ---`);\n    const newIds = await invokeBatch(lambdaName, numInstances);\n    totalInvocations += numInstances;\n\n    newIds.forEach((id) => uniqueInstanceIds.add(id));\n\n    console.log(\n      `Wave ${i} complete. Found ${uniqueInstanceIds.size} of ${numInstances} unique instances.`,\n    );\n  }\n\n  console.log(\n    `Warming complete. Found ${uniqueInstanceIds.size} unique instances from ${totalInvocations} total invocations over ${wavesCompleted} waves.`,\n  );\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      targetInstances: numInstances,\n      warmedInstances: uniqueInstanceIds.size,\n      totalInvocations,\n      wavesCompleted,\n      instanceIds: [...uniqueInstanceIds],\n    }),\n  };\n};\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  process.env.LAMBDA_NAME = \"infra-core-api-lambda\";\n  process.env.NUM_INSTANCES = \"3\";\n  process.env.MAX_WAVES = \"3\"; // Configurable number of waves\n  console.log(await handler({}));\n}\n"],
  "mappings": ";;;;;;AAAA,OAAS,gBAAAA,EAAc,iBAAAC,MAAqB,yBAC5C,OAAS,eAAAC,MAAmB,OAE5B,IAAMC,EAAe,IAAIH,EAAa,CAAC,CAAC,EAClCI,EAAc,IAAIF,EAKxB,eAAeG,EACbC,EACAC,EACsB,CACtB,GAAIA,GAAS,EACX,OAAO,IAAI,IAGb,QAAQ,IAAI,qBAAqBA,CAAK,4BAA4B,EAElE,IAAMC,EAAqB,MAAM,KAAK,CAAE,OAAQD,CAAM,EAAG,IAAM,CAC7D,IAAME,EAAU,IAAIR,EAAc,CAChC,aAAcK,EACd,QAAS,KAAK,UAAU,CAAE,OAAQ,QAAS,CAAC,CAC9C,CAAC,EACD,OAAOH,EAAa,KAAKM,CAAO,CAClC,CAAC,EAEKC,EAAU,MAAM,QAAQ,WAAWF,CAAkB,EACrDG,EAAmB,IAAI,IAE7B,OAAAD,EAAQ,QAASE,GAAW,CAC1B,GAAIA,EAAO,SAAW,aAAeA,EAAO,MAAM,QAChD,GAAI,CACF,IAAMC,EAAgBT,EAAY,OAAOQ,EAAO,MAAM,OAAO,EACvDE,EAAO,KAAK,MAAMD,CAAa,EACjCC,EAAK,YACPH,EAAiB,IAAIG,EAAK,UAAU,CAExC,OAASC,EAAG,CACV,QAAQ,MAAM,8CAA+CA,CAAC,CAChE,MACSH,EAAO,SAAW,YAC3B,QAAQ,MAAM,qBAAsBA,EAAO,OAAO,OAAO,CAE7D,CAAC,EAEMD,CACT,CAEO,IAAMK,EAAU,MAAOC,GAAc,CAC1C,GAAM,CAAE,WAAAX,EAAY,gBAAAY,EAAiB,YAAAC,CAAY,EAAI,CACnD,WAAY,QAAQ,IAAI,YACxB,gBAAiB,QAAQ,IAAI,cAC7B,YAAa,QAAQ,IAAI,SAC3B,EAEA,GAAI,CAACb,GAAc,CAACY,EAClB,MAAM,IAAI,MAAM,0DAA0D,EAG5E,IAAME,EAAe,SAASF,EAAiB,EAAE,EAE3CG,EAAW,SAASF,GAAe,IAAK,EAAE,EAE5CG,EAAmB,EACnBC,EAAiB,EACfC,EAAoB,IAAI,IAE9B,QAASC,EAAI,EAAGA,GAAKJ,EAAUI,IAAK,CAKlC,GAJAF,EAAiBE,EAGGL,EAAeI,EAAkB,MAClC,EAAG,CACpB,QAAQ,IAAI,mCAAmC,EAC/C,KACF,CAEA,QAAQ,IAAI,YAAYC,CAAC,OAAOJ,CAAQ,MAAM,EAC9C,IAAMK,EAAS,MAAMrB,EAAYC,EAAYc,CAAY,EACzDE,GAAoBF,EAEpBM,EAAO,QAASC,GAAOH,EAAkB,IAAIG,CAAE,CAAC,EAEhD,QAAQ,IACN,QAAQF,CAAC,oBAAoBD,EAAkB,IAAI,OAAOJ,CAAY,oBACxE,CACF,CAEA,eAAQ,IACN,2BAA2BI,EAAkB,IAAI,0BAA0BF,CAAgB,2BAA2BC,CAAc,SACtI,EAEO,CACL,WAAY,IACZ,KAAM,KAAK,UAAU,CACnB,gBAAiBH,EACjB,gBAAiBI,EAAkB,KACnC,iBAAAF,EACA,eAAAC,EACA,YAAa,CAAC,GAAGC,CAAiB,CACpC,CAAC,CACH,CACF,EAEI,YAAY,MAAQ,UAAU,QAAQ,KAAK,CAAC,CAAC,KAC/C,QAAQ,IAAI,YAAc,wBAC1B,QAAQ,IAAI,cAAgB,IAC5B,QAAQ,IAAI,UAAY,IACxB,QAAQ,IAAI,MAAMR,EAAQ,CAAC,CAAC,CAAC",
  "names": ["LambdaClient", "InvokeCommand", "TextDecoder", "lambdaClient", "textDecoder", "invokeBatch", "lambdaName", "count", "invocationPromises", "command", "results", "foundInstanceIds", "result", "payloadString", "body", "e", "handler", "event", "numInstancesStr", "maxWavesStr", "numInstances", "maxWaves", "totalInvocations", "wavesCompleted", "uniqueInstanceIds", "i", "newIds", "id"]
}
