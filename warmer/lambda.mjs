import path from 'path';
      import { fileURLToPath } from 'url';
      import { createRequire as topLevelCreateRequire } from 'module';
      const require = topLevelCreateRequire(import.meta.url);
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
import{LambdaClient as f,InvokeCommand as v}from"@aws-sdk/client-lambda";import{TextDecoder as u}from"util";var g=new f({}),p=new u;async function I(d,a){if(a<=0)return new Set;console.log(`Firing a batch of ${a} concurrent invocations...`);let c=Array.from({length:a},()=>{let e=new v({FunctionName:d,Payload:JSON.stringify({action:"warmer"})});return g.send(e)}),i=await Promise.allSettled(c),n=new Set;return i.forEach(e=>{if(e.status==="fulfilled"&&e.value.Payload)try{let o=p.decode(e.value.Payload),t=JSON.parse(o);t.instanceId&&n.add(t.instanceId)}catch(o){console.error("Error parsing payload from target function:",o)}else e.status==="rejected"&&console.error("Invocation failed:",e.reason.message)}),n}var S=async d=>{let{lambdaName:a,numInstancesStr:c,maxWavesStr:i}={lambdaName:process.env.LAMBDA_NAME,numInstancesStr:process.env.NUM_INSTANCES,maxWavesStr:process.env.MAX_WAVES};if(!a||!c)throw new Error("Env vars 'LAMBDA_NAME' and 'NUM_INSTANCES' are required.");let n=parseInt(c,10),e=parseInt(i||"5",10),o=0,t=0,s=new Set;for(let r=1;r<=e;r++){if(t=r,n-s.size<=0){console.log("Target met. No more waves needed.");break}console.log(`--- Wave ${r} of ${e} ---`);let l=await I(a,n);o+=n,l.forEach(m=>s.add(m)),console.log(`Wave ${r} complete. Found ${s.size} of ${n} unique instances.`)}return console.log(`Warming complete. Found ${s.size} unique instances from ${o} total invocations over ${t} waves.`),{statusCode:200,body:JSON.stringify({targetInstances:n,warmedInstances:s.size,totalInvocations:o,wavesCompleted:t,instanceIds:[...s]})}};import.meta.url===`file://${process.argv[1]}`&&(process.env.LAMBDA_NAME="infra-core-api-lambda",process.env.NUM_INSTANCES="3",process.env.MAX_WAVES="3",console.log(await S({})));export{S as handler};
//# sourceMappingURL=lambda.mjs.map
