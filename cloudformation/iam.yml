AWSTemplateFormatVersion: 2010-09-09
Description: Resume Book API - IAM Roles
Transform: AWS::Serverless-2016-10-31


Parameters:
  RunEnvironment:
    Type: String
    AllowedValues: [ 'dev', 'prod' ]
  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  ResumeS3BucketName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  AuthLambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  CacheDynamoTableArn:
    Type: String

Resources:
  ResumeBookAuthLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AuthLambdaFunctionName}:*
          PolicyName: lambda
  ResumeBookApiLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: '*' 
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:*
                  - "s3-object-lambda:*"
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${ResumeS3BucketName}-${RunEnvironment}
                  - !Sub arn:aws:s3:::${ResumeS3BucketName}-${RunEnvironment}/*
          PolicyName: lambda-s3
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - dynamodb:*
                Effect: Allow
                Resource:
                  - !Ref CacheDynamoTableArn
          PolicyName: lambda-dynamo
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:infra-resume-book-db-config*
          PolicyName: lambda-db-secrets

Outputs:
  MainFunctionRoleArn:
    Description: "Main API IAM role ARN"
    Value: !GetAtt ResumeBookApiLambdaIAMRole.Arn
  AuthFunctionRoleArn:
    Description: "Authorizer lambda IAM role ARN"
    Value: !GetAtt ResumeBookAuthLambdaIAMRole.Arn