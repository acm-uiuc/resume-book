AWSTemplateFormatVersion: 2010-09-09
Description: Lambda function warmer
Transform: AWS::Serverless-2016-10-31

Parameters:
  LambdaFunctionNameBase:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-lambda-warmer
  FunctionToWarm:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  NumInstances:
    Type: Number
    Default: 3

Resources:
  WarmerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionNameBase}-${FunctionToWarm}
      RetentionInDays: 7

  WarmerLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-logging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionNameBase}-${FunctionToWarm}:*
        - PolicyName: lambda-invoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - Fn::Sub: "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionToWarm}"

  WarmerLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - WarmerLambdaLogGroup
    Properties:
      Architectures: [arm64]
      CodeUri: ../dist/warmer
      AutoPublishAlias: live
      Runtime: nodejs22.x
      Description: !Sub "Lambda warmer for function ${FunctionToWarm}"
      FunctionName: !Sub "${LambdaFunctionNameBase}-${FunctionToWarm}"
      Handler: lambda.handler
      MemorySize: 256
      Role: !GetAtt WarmerLambdaIAMRole.Arn
      Timeout: 15
      Environment:
        Variables:
          LAMBDA_NAME: !Ref FunctionToWarm
          NUM_INSTANCES: !Ref NumInstances

  WarmerSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Schedule to run warmer for ${FunctionToWarm}"
      ScheduleExpression: "rate(4 minutes)"
      State: "ENABLED"
      Targets:
        - Id: "WarmerLambdaTarget"
          Arn: !GetAtt WarmerLambdaFunction.Arn
          Input: "{}"

  WarmerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WarmerLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt WarmerSchedule.Arn
