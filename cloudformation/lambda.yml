AWSTemplateFormatVersion: 2010-09-09
Description: Resume Book API Lambda
Transform: AWS::Serverless-2016-10-31

Parameters:
  AlertSNSArn:
    Description: SNS Queue to send alarm alerts to
    Type: String
    Default: arn:aws:sns:us-east-1:298118738376:infra-monitor-alerts
  RunEnvironment:
    Type: String
    AllowedValues: [ 'dev', 'prod' ]

  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-resume-book-api-lambda

  ResumeS3BucketName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-resume-book-pdfs

  ResumeBookApiGWName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-resume-book-api-gw

  AuthLambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-resume-book-auth-lambda

  UserAuthTableName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-resume-book-auth-data
  ApiDomainName:
    Type: String
    Default: resume-api.acm.illinois.edu
  ApiCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:298118738376:certificate/4ba7200a-cfc7-4234-b242-0281030df5f5
Conditions:
  IsProd: !Equals [!Ref RunEnvironment, 'prod']
Resources:
  # API Lambda
  ResumeBookApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../code 
      AutoPublishAlias: live
      Runtime: python3.10
      Description: Resume Book API Lambda
      FunctionName: !Ref LambdaFunctionName
      Handler: app.lambda_handler
      MemorySize: 512
      Role: !GetAtt ResumeBookApiLambdaIAMRole.Arn
      Timeout: 60
      Environment:
        Variables:
          RunEnvironment: !Ref RunEnvironment
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ResumeBookApiGateway
            Path: /{proxy+}
            Method: ANY

  ResumeBookApiLambdaFunctionErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${LambdaFunctionName}-alarm'
      AlarmDescription: !Sub 'Alarm if ${LambdaFunctionName} function errors are detected.'
      Namespace: 'AWS/Lambda'
      MetricName: 'Errors'
      Statistic: 'Sum'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '0'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref ResumeBookApiLambdaFunction

  ResumeBookApiLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:*
                  - "s3-object-lambda:*"
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${ResumeS3BucketName}-${RunEnvironment}
                  - !Sub arn:aws:s3:::${ResumeS3BucketName}-${RunEnvironment}/*
          PolicyName: lambda-s3

  ResumeBookApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 7

  # Combined Authorizer (AAD + Username/Password)

  ResumeBookAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../code/authorizers/
      AutoPublishAlias: live
      Runtime: python3.10
      Description: Resume Book Auth Lambda
      FunctionName: !Ref AuthLambdaFunctionName
      Handler: combined.lambda_handler
      MemorySize: 2048
      Role: !GetAtt ResumeBookAuthLambdaIAMRole.Arn
      Timeout: 60
    
  ResumeBookAuthLambdaFunctionErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${AuthLambdaFunctionName}-alarm'
      AlarmDescription: !Sub 'Alarm if ${AuthLambdaFunctionName} function errors are detected.'
      Namespace: 'AWS/Lambda'
      MetricName: 'Errors'
      Statistic: 'Sum'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '0'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref ResumeBookAuthLambdaFunction

  ResumeBookAuthLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AuthLambdaFunctionName}:*
          PolicyName: lambda

  ResumeBookAuthLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AuthLambdaFunctionName}
      RetentionInDays: 7
 
# API Gateway
  ResumeBookApiGateway:
    Type: AWS::Serverless::Api
    DependsOn: 
      - ResumeBookApiLambdaFunction
    Properties:
      Name: !Ref ResumeBookApiGWName
      Description: Resume Book API Gateway
      AlwaysDeploy: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../docs/swagger-resume-book.yml
      Auth:
        Authorizers:
          CombinedAuthorizer:
            FunctionArn: !GetAtt ResumeBookAuthLambdaFunction.Arn
      Domain: 
        DomainName: !Ref ApiDomainName
        CertificateArn: !Ref ApiCertificateArn
      StageName: default
      Cors:
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date'"
        AllowOrigin: "'*'"
        MaxAge: "'300'"

  ResumeBookApiGatewayLatencyAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${ResumeBookApiGWName}-latency-alarm'
      AlarmDescription: !Sub 'Alarm if ${ResumeBookApiGWName} API gateway latency is > 2s.'
      Namespace: 'AWS/ApiGateway'
      MetricName: 'Latency'
      Statistic: 'Average'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '3000'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'ApiName'
          Value: !Ref ResumeBookApiGWName

  ResumeBookApiGateway5XXErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${ResumeBookApiGWName}-5XX-alarm'
      AlarmDescription: !Sub 'Alarm if ${ResumeBookApiGWName} API gateway 5XX errors are detected.'
      Namespace: 'AWS/ApiGateway'
      MetricName: '5XXError'
      Statistic: 'Average'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '2'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'ApiName'
          Value: !Ref ResumeBookApiGWName

  AadAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ResumeBookAuthLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeBookApiGateway}/authorizers/*"

  APILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ResumeBookApiLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ResumeBookApiGateway
          - "/*/*/*"

  # S3 Bucket
  ResumeStorageS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${ResumeS3BucketName}-${RunEnvironment}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - PUT
            Id: CORSAllowAll
            MaxAge: 3600

Outputs:
  ApiUrl:
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/default
      - ApiId: !Ref ResumeBookApiGateway
